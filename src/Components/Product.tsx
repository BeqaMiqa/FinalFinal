import { useEffect, useState } from "react";
import axios from 'axios';
import './styles.css';
function Product(props: any) {
  const {
    man_id,
    model_id,
    photo,
    car_id,
    car_model,
    photo_ver,
    prod_year,
    man_name,
    pic_number,
    price_value,
    views,
    category_name,
    car_run_km,
  } = props;
  
  interface Car {
    car_id: number;
    photo: string;
    man_id: number;
    model_id: number;
    prod_year: number;
    price_value: number;
    price_usd: number;
    fuel_type_id: number;
    gear_type_id: number;
    right_wheel: boolean;
    engine_volume: number;
    car_run_km: number;
    views: number;
    for_rent: boolean;
    special_persons: boolean;
    rent_insured: boolean;
    location_id: number;
    pic_number: number;
  }
  
  const [cars, setCars] = useState<Car[]>([]);
  const [selectedButton1, setSelectedButton1] = useState<'l' | '$'>('l');
  const [hoveredImages, setHoveredImages] = useState<(number | null)[]>([]);
  const [data, setData] = useState(null);
  const [ver,setver]=useState(1)
  const [val,setval]=useState(0)
  const [ent,setent]=useState(0)


  useEffect(() => {
    const fetchCars = async () => {
      try {
        const response = await axios.get(
          `https://api2.myauto.ge/ka/products/?Page=${selectedButton1}&fbclid=IwAR2b1V6Yrk3njz57yoAAx2-SYEzeLo7UgFl99SSmqCnaN5zUH6xZCAjuPLc`
        );
        const carData = response.data.data.items;
        setCars(carData);
        setHoveredImages(new Array(carData.length).fill(null));
      } catch (error) {
        console.error('Error fetching car data:', error);
      }
    };
    
    fetchCars();
  }, []); // Empty dependency array to run the effect only once
  



  
  useEffect(() => {
    fetch(`https://api2.myauto.ge/ka/getManModels?man_id=${man_id}`)
      .then((res) => res.json())
      .then((res) => {
        setData(res.data.find((item: any) => item.model_id === model_id));
      });
  }, [man_id, model_id]);

  function getName() {
    return (
      <p className="product-title">
        {`${man_name} ${data?.["model_name"]} ${car_model} `}
        <span className="year-span">{prod_year} წ</span>
      </p>
    );
  }

  function newPrice(price: string): string {
    let new_price: string = "";
    let i: number = 3;
    while (i < price.length) {
      new_price =
        "," + price.slice(price.length - i, price.length - i + 3) + new_price;
      i += 3;
    }
    return price.slice(0, price.length - (i - 3)) + new_price;
  }

  const LocationId: { [key: number]: string } = {
    1: 'ბათუმი',
    2: 'თბილისი',
    3: 'ქუთაისი',
    4: 'რუსთავი',
    5: 'გორი',
    6: 'ზუგდიდი',
    7: 'ფოთი',
    8: 'ხაშური',
    9: 'სამტრედია',
  };

  const fuelTypes: { [key: number]: string } = {
    2: 'ბენზინი',
    3: 'დიზელი',
    6: 'ჰიბრიდი',
    7: 'ელექტრო',
    8: 'ბუნებრივი აირი',
    9: 'თხევადი გაზი',
    10: 'დატ. ჰიბრიდი',
    12: 'წყალბადი',
  };

  const driveTypes: { [key: number]: string } = {
    1: 'მექანიკა',
    2: 'ავტომატიკა',
    3: 'ტიპტრონიკი',
    4: 'ვარიატორი',
  };

  const getPrice = (car: any) => {
    return selectedButton1 === 'l' ? car.price_value : car.price_usd;
  };

  const handleButtonClick = (button: 'l' | '$') => {
    setSelectedButton1(button);
  };

  const handleImageHover = (carIndex: number, imageIndex: number, car: Car) => {
    setHoveredImages((prevHoveredImages) => {
      const newHoveredImages = [...prevHoveredImages];
      if (imageIndex >= 1 && imageIndex <= 3) {
        newHoveredImages[carIndex] = imageIndex;
      } else if (imageIndex === 4 && car.pic_number - 4 > 0) {
        newHoveredImages[carIndex] = imageIndex;
      } else {
        newHoveredImages[carIndex] = null;
      }
      return newHoveredImages;
    });
  };
// useEffect(()=>{
// console.log("ver changed")
// },[ver])
  const handleMouseLeave = () => {
    setver(1);
    setval(0);

  };
  return (
<div className="product-wrapper">
<div className="show" onMouseEnter={() => { setent(1) } } onMouseLeave={() => { setent(0) }}>
  <div id="one" onMouseEnter={() => { setver(1); setval(1); }} onMouseLeave={handleMouseLeave}>
  <div className={val === 1 ? 'shwbtn' : (val !== 1 && ver !== 1 ? 'shwbtn1' : 'on')}>
  
</div>

    {/* 1 */}
  </div>
<div id="two" onMouseEnter={() => setver(2) } onMouseLeave={handleMouseLeave}>
<div className={ver === 2 ? 'shwbtn' :  (ent === 1  ? 'shwbtn1' : 'on')}></div>
{/* 2 */}
  </div>
<div id="three" onMouseEnter={() => setver(3)}  onMouseLeave={handleMouseLeave}>
<div className={ver === 3 ? 'shwbtn' :  (ent === 1  ? 'shwbtn1' : 'on')}></div>
  {/* 3 */}
  </div>
<div id="four" onMouseEnter={() => setver(4)}  onMouseLeave={handleMouseLeave}>
<div className={ver === 4 ? 'shwbtn' :  (ent === 1  ? 'shwbtn1' : 'on')}></div>
  {/* 4 */}
  </div>
{ver === 4 && cars.length > 0 && cars[0].pic_number - 4 > 0 ? (

 <p id="shhh">+{cars[0].pic_number - 4} images</p>
  ) : null}
  {ver === 4 && cars.length > 0 && cars[0].pic_number - 4 > 0 ? (
 <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="100" height="24" className="imsvg"><path fill="white" d="M20 5H4v14l9.292-9.294a1 1 0 0 1 1.414 0L20 15.01V5zM2 3.993A1 1 0 0 1 2.992 3h18.016c.548 0 .992.445.992.993v16.014a1 1 0 0 1-.992.993H2.992A.993.993 0 0 1 2 20.007V3.993zM8 11a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"></path></svg>
  ) : null}
</div>
{/* ----------------------------------------------------------------------------------------------------------------- */}
<div
  className="product-photo"
  style={{
    backgroundImage: `url(https://static.my.ge/myauto/photos/${photo}/thumbs/${car_id}_${ver}.jpg?v=${photo_ver})`,
  }}
></div>
{/* ----------------------------------------------------------------------------------------------------------------- */}

      {data && getName()}
      

      <div >
      <p style={{marginBottom:'15px'}}>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
<circle cx="8" cy="8" r="6.3" stroke="#9CA2AA" stroke-width="1.4"/>
<circle cx="8" cy="8" r="1.3" stroke="#9CA2AA" stroke-width="1.4"/>
<path d="M9.5 8L13.5 6.5" stroke="#9CA2AA" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.21387 7.99979L1.99977 7.29883" stroke="#9CA2AA" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8 9.5V14" stroke="#9CA2AA" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
    {props.right_wheel ? 'მარჯვენა' : 'მარცხენა'}
</p>
      <p>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.52488 2C5.13653 2 4.82171 2.35066 4.82171 2.78322C4.82171 3.21578 5.13653 3.56643 5.52488 3.56643H7.33347V5.27273H5.68644C5.51194 5.27273 5.3446 5.3412 5.22121 5.46308L4.00406 6.66538H3.33668C2.97331 6.66538 2.67875 6.95635 2.67875 7.31528V8.54545H1.50009V7.13369C1.50009 6.7084 1.16428 6.36364 0.750043 6.36364C0.335806 6.36364 0 6.7084 0 7.13369V12.084C0 12.5093 0.335806 12.8541 0.750043 12.8541C1.16428 12.8541 1.50009 12.5093 1.50009 12.084V10.0856H2.67875V11.9574C2.67875 12.3164 2.97331 12.6074 3.33668 12.6074H4.00406L5.22121 13.8096C5.3446 13.9315 5.51194 14 5.68644 14H10.8559C10.9983 14 11.1368 13.9544 11.2507 13.87L13.1305 12.4774C13.2961 12.3546 13.3936 12.162 13.3936 11.9574V10.0856H14.4999V12.084C14.4999 12.5093 14.8357 12.8541 15.25 12.8541C15.6642 12.8541 16 12.5093 16 12.084V7.13369C16 6.7084 15.6642 6.36364 15.25 6.36364C14.8357 6.36364 14.4999 6.7084 14.4999 7.13369V8.54545H13.3936V7.31528C13.3936 7.14292 13.3243 6.97761 13.2009 6.85573L11.7911 5.46308C11.6677 5.3412 11.5004 5.27273 11.3259 5.27273H8.7398V3.56643H10.5475C10.9358 3.56643 11.2507 3.21578 11.2507 2.78322C11.2507 2.35066 10.9358 2 10.5475 2H8.03664H5.52488ZM4.74181 7.77483L5.95896 6.57253H11.0533L12.0778 7.58448V11.6325L10.6366 12.7002H5.95896L4.74181 11.4979C4.61842 11.376 4.45108 11.3075 4.27658 11.3075H3.99461V7.96518H4.27658C4.45108 7.96518 4.61842 7.89671 4.74181 7.77483Z" fill="#9CA2AA"/>
</svg>{' '}
        {props.fuel_type_id === 6 ? (props.engine_volume / 1000).toFixed(1) : props.engine_volume / 1000} {fuelTypes[props.fuel_type_id]}
      </p>
</div><div>
      <p style={{marginBottom:'15px'}}>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
<g id="speed">
<g id="Group 33658">
<circle id="Ellipse 12" cx="8" cy="8" r="6.3" stroke="#9CA2AA" stroke-width="1.4"/>
<circle id="Ellipse 14" cx="8" cy="8" r="1.3" stroke="#9CA2AA" stroke-width="1.4"/>
<path id="Ellipse 13" d="M12 8C12 5.79086 10.2091 4 8 4C5.79086 4 4 5.79086 4 8" stroke="#9CA2AA" stroke-width="1.4" stroke-linecap="round"/>
<path id="Vector 24" d="M9 7L10.5 5.5" stroke="#9CA2AA" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</g>
</svg> {props.car_run_km} კმ</p>

      <p>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
<rect x="2.6" y="7.6" width="10.8" height="7.8" rx="1.2" stroke="#8C929B" stroke-width="1.2"/>
<path d="M8 5V10" stroke="#8C929B" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8 12V13.5" stroke="#8C929B" stroke-linecap="round" stroke-linejoin="round"/>
<circle cx="8" cy="2.5" r="1.8" stroke="#8C929B" stroke-width="1.4"/>
<path d="M5 10V13" stroke="#8C929B" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11 10V13" stroke="#8C929B" stroke-linecap="round" stroke-linejoin="round"/>
</svg>{driveTypes[props.gear_type_id]}
</p>
      
</div>



      
      {props.for_rent === true && <p style={{color:'white', backgroundColor:'green',width:'85px',padding:'5px',borderRadius:'5px'}}>ქირავდება</p>}
      <p className="loc">{LocationId[props.location_id]}</p>

      {!props.special_persons && <p className="green">s-vip</p>}

      {props.rent_insured === true && <p style={{color:'green'}}>განბაჟებული</p>}
<div className="cur">
<p>
  {selectedButton1 === 'l' ? '' : ''} {selectedButton1 === 'l' ? props.price_value : props.price_usd}
</p>
      <button 
  className="sel"
  onClick={() => handleButtonClick('l')}
  style={selectedButton1 === 'l' ? { backgroundColor: '#272A37', color:'white' } : {backgroundColor: 'white' , color:'#8C929B'}}
>

₾
      </button>
      <button
        className="sel"
        onClick={() => handleButtonClick('$')}
        style={selectedButton1 === '$' ? { backgroundColor: '#272A37' , color:'white'} : {backgroundColor: 'white' ,color:'#8C929B'}}
      >
        $
      </button>
      </div>
    <p style={{color:'grey'}}>{props.views} ნახვა</p>  <svg xmlns="http://www.w3.org/2000/svg" width="80" height="16" viewBox="0 0 80 16" fill="none">
<path d="M5.97263 14H3.13887C2.83706 13.9996 2.54773 13.8795 2.33432 13.6661C2.1209 13.4527 2.00082 13.1633 2.0004 12.8615V10.2233C2.00036 10.0743 2.02978 9.92687 2.08699 9.78937C2.14419 9.65186 2.22803 9.52704 2.33369 9.42208L9.41848 2.33328C9.6321 2.11987 9.92171 2 10.2237 2C10.5256 2 10.8152 2.11987 11.0288 2.33328L13.6663 4.97155C13.8797 5.18517 13.9996 5.47478 13.9996 5.77673C13.9996 6.07869 13.8797 6.36829 13.6663 6.58191L7.58219 12.6668H13.0566C13.2334 12.6668 13.403 12.7371 13.528 12.8621C13.653 12.9871 13.7232 13.1566 13.7232 13.3334C13.7232 13.5102 13.653 13.6798 13.528 13.8048C13.403 13.9298 13.2334 14 13.0566 14H5.97263ZM3.33355 12.6668H4.36306L3.33355 11.6373V12.6668ZM5.97343 12.3912L10.73 7.63466L8.36654 5.27119L3.60996 10.0278L5.97343 12.3912ZM11.6722 6.69248L12.5879 5.77673L10.2245 3.41326L9.30792 4.32901L11.6722 6.69248Z" fill="#6F7383"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.2589 14.3789V1.61978C39.2834 1.25628 39.6076 0.979985 39.9848 1.00114C40.362 0.979985 40.6862 1.25628 40.7107 1.61978V14.3789C40.6866 14.7427 40.3624 15.0196 39.9848 14.9989C39.6072 15.0196 39.2831 14.7427 39.2589 14.3789ZM43.6142 14.2984C43.2133 14.2984 42.8884 13.9851 42.8884 13.5986H42.1625V12.2514H45.9189V8.76632L45.8884 8.69633H42.1625V7.2967H45.2533L43.9569 4.44634H42.1625V3.10059H44.0251C44.5064 3.10567 44.9391 3.38467 45.1277 3.8116L46.7108 7.2995H47.2741C47.675 7.2995 48 7.61282 48 7.99932C48 8.38581 47.675 8.69913 47.2741 8.69913H47.2436V12.9253C47.2526 13.2872 46.9563 13.5879 46.5809 13.5979H46.5178C46.5178 13.9844 46.1928 14.2977 45.7919 14.2977L43.6142 14.2984ZM33.4519 13.5985C33.4519 13.985 33.7769 14.2984 34.1778 14.2984L36.3554 14.2963C36.7563 14.2963 37.0813 13.9829 37.0813 13.5964H37.8072V12.2514H34.05V8.7691L34.0798 8.69912H37.8072V7.29948H34.7149L36.0099 4.44632H37.8072V3.10057H35.9424C35.4608 3.1052 35.0277 3.3843 34.8391 3.81159L33.2559 7.29948H32.6963C32.3038 7.30789 31.9924 7.62092 32.0001 7.9993C31.9928 8.37753 32.304 8.69032 32.6963 8.69912H32.726V12.9253C32.7167 13.287 33.0122 13.5879 33.3873 13.5985H33.4519Z" fill="#6F7383"/>
<path d="M39.2589 1.61978L39.2089 1.61641V1.61978H39.2589ZM39.2589 14.3789H39.2088L39.209 14.3822L39.2589 14.3789ZM39.9848 1.00114L39.982 1.05137L39.9876 1.05106L39.9848 1.00114ZM40.7107 1.61978H40.7608L40.7606 1.61642L40.7107 1.61978ZM40.7107 14.3789L40.7607 14.3822V14.3789H40.7107ZM39.9848 14.9989L39.9876 14.9487L39.9821 14.949L39.9848 14.9989ZM42.8884 13.5986H42.9384V13.5486H42.8884V13.5986ZM43.6142 14.2984V14.3484H43.6143L43.6142 14.2984ZM42.1625 13.5986H42.1125V13.6486H42.1625V13.5986ZM42.1625 12.2514V12.2014H42.1125V12.2514H42.1625ZM45.9189 12.2514V12.3014H45.9689V12.2514H45.9189ZM45.9189 8.76632H45.9689V8.7559L45.9648 8.74635L45.9189 8.76632ZM45.8884 8.69633L45.9343 8.67636L45.9212 8.64633H45.8884V8.69633ZM42.1625 8.69633H42.1125V8.74633H42.1625V8.69633ZM42.1625 7.2967V7.2467H42.1125V7.2967H42.1625ZM45.2533 7.2967V7.3467H45.331L45.2988 7.276L45.2533 7.2967ZM43.9569 4.44634L44.0024 4.42564L43.989 4.39634H43.9569V4.44634ZM42.1625 4.44634H42.1125V4.49634H42.1625V4.44634ZM42.1625 3.10059V3.05059H42.1125V3.10059H42.1625ZM44.0251 3.10059L44.0256 3.05059H44.0251V3.10059ZM45.1277 3.8116L45.082 3.83181L45.0822 3.83227L45.1277 3.8116ZM46.7108 7.2995L46.6653 7.32016L46.6786 7.3495H46.7108V7.2995ZM47.2436 8.69913V8.64913H47.1936V8.69913H47.2436ZM47.2436 12.9253H47.1936L47.1937 12.9266L47.2436 12.9253ZM46.5809 13.5979V13.6479L46.5822 13.6478L46.5809 13.5979ZM46.5178 13.5979V13.5479H46.4678V13.5979H46.5178ZM45.7919 14.2977V14.2477H45.7919L45.7919 14.2977ZM34.1778 14.2984V14.3484H34.1778L34.1778 14.2984ZM33.4519 13.5985H33.5019V13.5485H33.4519V13.5985ZM36.3554 14.2963V14.2463H36.3554L36.3554 14.2963ZM37.0813 13.5964V13.5464H37.0313V13.5964H37.0813ZM37.8072 13.5964V13.6464H37.8572V13.5964H37.8072ZM37.8072 12.2514H37.8572V12.2014H37.8072V12.2514ZM34.05 12.2514H34V12.3014H34.05V12.2514ZM34.05 8.7691L34.004 8.74953L34 8.75891V8.7691H34.05ZM34.0798 8.69912V8.64912H34.0467L34.0338 8.67955L34.0798 8.69912ZM37.8072 8.69912V8.74912H37.8572V8.69912H37.8072ZM37.8072 7.29948H37.8572V7.24948H37.8072V7.29948ZM34.7149 7.29948L34.6694 7.27882L34.6373 7.34948H34.7149V7.29948ZM36.0099 4.44632V4.39632H35.9777L35.9644 4.42566L36.0099 4.44632ZM37.8072 4.44632V4.49632H37.8572V4.44632H37.8072ZM37.8072 3.10057H37.8572V3.05057H37.8072V3.10057ZM35.9424 3.10057V3.05057L35.9419 3.05057L35.9424 3.10057ZM34.8391 3.81159L34.8846 3.83225L34.8848 3.83178L34.8391 3.81159ZM33.2559 7.29948V7.34948H33.2881L33.3014 7.32015L33.2559 7.29948ZM32.6963 7.29948V7.24947L32.6952 7.24949L32.6963 7.29948ZM32.0001 7.9993L32.0502 8.00026L32.0501 7.99828L32.0001 7.9993ZM32.6963 8.69912L32.6951 8.74912H32.6963V8.69912ZM32.726 8.69912H32.776V8.64912H32.726V8.69912ZM32.726 12.9253L32.776 12.9266V12.9253H32.726ZM33.3873 13.5985L33.3859 13.6485H33.3873V13.5985ZM39.2089 1.61978V14.3789H39.3089V1.61978H39.2089ZM39.9876 0.951216C39.5848 0.928625 39.2355 1.22393 39.209 1.61642L39.3088 1.62314C39.3314 1.28864 39.6305 1.03135 39.982 1.05106L39.9876 0.951216ZM40.7606 1.61642C40.7341 1.22393 40.3849 0.928625 39.982 0.951216L39.9876 1.05106C40.3391 1.03135 40.6383 1.28864 40.6608 1.62314L40.7606 1.61642ZM40.7607 14.3789V1.61978H40.6607V14.3789H40.7607ZM39.9821 15.0488C40.3853 15.071 40.7345 14.775 40.7606 14.3822L40.6608 14.3756C40.6386 14.7104 40.3395 14.9683 39.9876 14.949L39.9821 15.0488ZM39.209 14.3822C39.2351 14.775 39.5843 15.071 39.9876 15.0488L39.9821 14.949C39.6301 14.9683 39.331 14.7104 39.3088 14.3756L39.209 14.3822ZM42.8384 13.5986C42.8384 14.0144 43.1875 14.3484 43.6142 14.3484V14.2484C43.2392 14.2484 42.9384 13.9557 42.9384 13.5986H42.8384ZM42.1625 13.6486H42.8884V13.5486H42.1625V13.6486ZM42.1125 12.2514V13.5986H42.2125V12.2514H42.1125ZM45.9189 12.2014H42.1625V12.3014H45.9189V12.2014ZM45.8689 8.76632V12.2514H45.9689V8.76632H45.8689ZM45.8426 8.7163L45.8731 8.78629L45.9648 8.74635L45.9343 8.67636L45.8426 8.7163ZM42.1625 8.74633H45.8884V8.64633H42.1625V8.74633ZM42.1125 7.2967V8.69633H42.2125V7.2967H42.1125ZM45.2533 7.2467H42.1625V7.3467H45.2533V7.2467ZM43.9113 4.46704L45.2078 7.3174L45.2988 7.276L44.0024 4.42564L43.9113 4.46704ZM42.1625 4.49634H43.9569V4.39634H42.1625V4.49634ZM42.1125 3.10059V4.44634H42.2125V3.10059H42.1125ZM44.0251 3.05059H42.1625V3.15059H44.0251V3.05059ZM45.1734 3.79139C44.9766 3.34581 44.5257 3.05587 44.0256 3.05059L44.0246 3.15058C44.4871 3.15547 44.9016 3.42352 45.082 3.83181L45.1734 3.79139ZM46.7564 7.27883L45.1732 3.79094L45.0822 3.83227L46.6653 7.32016L46.7564 7.27883ZM47.2741 7.2495H46.7108V7.3495H47.2741V7.2495ZM48.05 7.99932C48.05 7.58349 47.7009 7.2495 47.2741 7.2495V7.3495C47.6491 7.3495 47.95 7.64214 47.95 7.99932H48.05ZM47.2741 8.74913C47.7009 8.74913 48.05 8.41514 48.05 7.99932H47.95C47.95 8.35649 47.6491 8.64913 47.2741 8.64913V8.74913ZM47.2436 8.74913H47.2741V8.64913H47.2436V8.74913ZM47.2936 12.9253V8.69913H47.1936V12.9253H47.2936ZM46.5822 13.6478C46.9834 13.6372 47.3033 13.3153 47.2936 12.9241L47.1937 12.9266C47.2019 13.2592 46.9291 13.5386 46.5796 13.5479L46.5822 13.6478ZM46.5178 13.6479H46.5809V13.5479H46.5178V13.6479ZM45.7919 14.3477C46.2187 14.3477 46.5678 14.0137 46.5678 13.5979H46.4678C46.4678 13.955 46.1669 14.2477 45.7919 14.2477V14.3477ZM43.6143 14.3484L45.7919 14.3477L45.7919 14.2477L43.6142 14.2484L43.6143 14.3484ZM34.1778 14.2484C33.8028 14.2484 33.5019 13.9557 33.5019 13.5985H33.4019C33.4019 14.0144 33.751 14.3484 34.1778 14.3484V14.2484ZM36.3554 14.2463L34.1777 14.2484L34.1778 14.3484L36.3555 14.3463L36.3554 14.2463ZM37.0313 13.5964C37.0313 13.9536 36.7304 14.2463 36.3554 14.2463V14.3463C36.7822 14.3463 37.1313 14.0123 37.1313 13.5964H37.0313ZM37.8072 13.5464H37.0813V13.6464H37.8072V13.5464ZM37.7572 12.2514V13.5964H37.8572V12.2514H37.7572ZM34.05 12.3014H37.8072V12.2014H34.05V12.3014ZM34 8.7691V12.2514H34.1V8.7691H34ZM34.0338 8.67955L34.004 8.74953L34.096 8.78867L34.1258 8.71868L34.0338 8.67955ZM37.8072 8.64912H34.0798V8.74912H37.8072V8.64912ZM37.7572 7.29948V8.69912H37.8572V7.29948H37.7572ZM34.7149 7.34948H37.8072V7.24948H34.7149V7.34948ZM35.9644 4.42566L34.6694 7.27882L34.7605 7.32015L36.0554 4.46699L35.9644 4.42566ZM37.8072 4.39632H36.0099V4.49632H37.8072V4.39632ZM37.7572 3.10057V4.44632H37.8572V3.10057H37.7572ZM35.9424 3.15057H37.8072V3.05057H35.9424V3.15057ZM34.8848 3.83178C35.0652 3.42316 35.4801 3.15502 35.9429 3.15057L35.9419 3.05057C35.4414 3.05538 34.9902 3.34543 34.7933 3.79139L34.8848 3.83178ZM33.3014 7.32015L34.8846 3.83225L34.7935 3.79092L33.2104 7.27881L33.3014 7.32015ZM32.6963 7.34948H33.2559V7.24948H32.6963V7.34948ZM32.0501 7.99828C32.043 7.64919 32.3307 7.35733 32.6973 7.34947L32.6952 7.24949C32.2769 7.25846 31.9419 7.59265 31.9502 8.00032L32.0501 7.99828ZM32.6974 8.64913C32.3309 8.64091 32.0434 8.34925 32.0501 8.00026L31.9501 7.99833C31.9423 8.40581 32.277 8.73973 32.6951 8.7491L32.6974 8.64913ZM32.726 8.64912H32.6963V8.74912H32.726V8.64912ZM32.776 12.9253V8.69912H32.676V12.9253H32.776ZM33.3887 13.5486C33.0395 13.5386 32.7674 13.259 32.776 12.9266L32.676 12.924C32.6659 13.3149 32.985 13.6371 33.3859 13.6485L33.3887 13.5486ZM33.4519 13.5485H33.3873V13.6485H33.4519V13.5485Z" fill="#6F7383"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.6857 2.1679C72.5127 2.29346 72.3477 2.43458 72.1909 2.5894L72.0626 2.72088L72 2.78989L71.9374 2.72088L71.8091 2.5894C71.6523 2.43458 71.4873 2.29346 71.3143 2.1679C70.7329 1.74614 70.0601 1.5 69.3 1.5C66.5847 1.5 65 3.87655 65 6.304C65 8.67851 66.1914 10.7406 68.137 12.4002C69.5053 13.5673 71.2954 14.5 72 14.5C72.705 14.5 74.495 13.5674 75.8633 12.4002C77.8088 10.7406 79 8.67852 79 6.304C79 3.87655 77.4153 1.5 74.7 1.5C73.9399 1.5 73.2671 1.74614 72.6857 2.1679ZM70.6754 3.71857C70.239 3.2911 69.7899 3.1 69.3 3.1C67.7514 3.1 66.6 4.44771 66.6 6.304C66.6 8.08759 67.481 9.73759 69.1754 11.1829C69.7667 11.6872 70.4605 12.1489 71.0737 12.4778C71.3797 12.6419 71.6422 12.7605 71.8422 12.8338C71.9123 12.8595 71.9644 12.8758 72.0001 12.886C72.0359 12.8758 72.088 12.8595 72.1581 12.8338C72.3581 12.7605 72.6207 12.6419 72.9266 12.4778C73.5398 12.1489 74.2337 11.6873 74.825 11.1829C76.5191 9.73772 77.4 8.08768 77.4 6.304C77.4 4.44771 76.2486 3.1 74.7 3.1C74.2101 3.1 73.761 3.29109 73.3246 3.71857L73.228 3.81755L72 5.17143L70.772 3.81755L70.6754 3.71857Z" fill="#6F7383"/>
</svg>
    </div>
  );
}

export default Product;
